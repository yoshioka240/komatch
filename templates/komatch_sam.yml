---
AWSTemplateFormatVersion: 2010-09-09

Transform: AWS::Serverless-2016-10-31

Mappings:
  EnvMap:
    prod:
      ApiGatewayModelName: ProdKomatchSchema
    dev:
      ApiGatewayModelName: DevKomatchSchema
    dev1:
      ApiGatewayModelName: Dev1KomatchSchema
    dev2:
      ApiGatewayModelName: Dev2KomatchSchema
    dev3:
      ApiGatewayModelName: Dev3KomatchSchema

Parameters:
  Env:
    Type: String
    Default: dev
    Description: Select environment.
    AllowedValues:
    - prod
    - dev
    - dev1
    - dev2
    - dev3

Resources:
  # API Gateway RestAPI
  SlackApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${Env}_KomatchApi"
      Description: !Sub "${Env} komatch api"
  # API Gateway Deployment
  # it depends on API Gateway Method
  SlackApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: SlackApiGatewayMethod
    Properties:
      RestApiId:
        Ref: SlackApiGatewayRestApi
      Description: apigateway deployment
  # API Gateway Stage
  # it depends on API Gateway Deployment
  SlackApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: !Sub "${Env}"
      Description: !Sub "${Env} stage"
      RestApiId:
        Ref: SlackApiGatewayRestApi
      DeploymentId:
        Ref: SlackApiGatewayDeployment
  # API Gateway Model
  SlackApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId:
        Ref: SlackApiGatewayRestApi
      ContentType: application/json
      Description: !Sub "Schema for ${Env} Komatch"
      Name: !FindInMap [EnvMap, Ref: Env, ApiGatewayModelName]
      Schema:
        $schema: "http://json-schema.org/draft-04/schema#"
        title: PetsModelNoFlatten
        type: object
        properties:
          status:
            type: string
          message:
            type: string
  # API Gateway Resource
  SlackApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: SlackApiGatewayRestApi
      ParentId:
        Fn::GetAtt:
          - SlackApiGatewayRestApi
          - RootResourceId
      PathPart: komatch
  # API Gateway Method
  SlackApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: SlackApiGatewayRestApi
      ResourceId:
        Ref: SlackApiGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        Uri:
          Fn::Join:
            - ""
            - - arn:aws:apigateway
              - ":"
              - Ref: AWS::Region
              - ":"
              - lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                - IndexLambdaFunction
                - Arn
              - /invocations
        IntegrationHttpMethod: POST
        IntegrationResponses:
          -
            StatusCode: 200
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        -
          StatusCode: 200
          ResponseModels:
            application/json: Empty
  # API Gateway UsagePlan
  SlackApiGatewayUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        -
          ApiId:
            Ref: SlackApiGatewayRestApi
          Stage:
            Ref: SlackApiGatewayStage
      Quota:
        Limit: 100
        Period: DAY
      Throttle:
        BurstLimit: 10
        RateLimit: 2
      Description: !Sub "${Env} komatch api usage plan"
      UsagePlanName: !Sub "${Env}_KomatchUsagePlan"

  # Lambda Function
  IndexLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Env}_Komatch_index"
      Environment:
        Variables:
          env: !Sub "${Env}"
      Handler: index.handler
      MemorySize: 128
      Runtime: ruby2.7
      CodeUri: ../src/index
      Role:
        Fn::GetAtt:
          - LambdaIAMRole
          - Arn
      Timeout: 10
  # Lambda Permission
  IndexLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
         Fn::GetAtt:
          - IndexLambdaFunction
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - arn:aws:execute-api
            - ":"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: SlackApiGatewayRestApi
            - /*/*/*

  ExtractKeywordsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Env}_Komatch_extract_keywords"
      Handler: comprehend.handler
      MemorySize: 128
      Runtime: ruby2.7
      CodeUri: ../src/extract_keywords
      Role:
        Fn::GetAtt:
          - LambdaIAMRole
          - Arn
      Timeout: 10

  ExtractKeywordsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
         Fn::GetAtt:
          - ExtractKeywordsFunction
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - arn:aws:execute-api
            - ":"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: SlackApiGatewayRestApi
            - /*/*/*

  RegisterQuestionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Env}_Komatch_register_question"
      Handler: register_question.handler
      MemorySize: 128
      Runtime: ruby2.7
      CodeUri: ../src/register_question
      Role:
        Fn::GetAtt:
          - LambdaIAMRole
          - Arn
      Timeout: 10

  RegisterQuestionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
         Fn::GetAtt:
          - RegisterQuestionFunction
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - arn:aws:execute-api
            - ":"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: SlackApiGatewayRestApi
            - /*/*/*

  RecommendUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Env}_Komatch_recommend_users"
      Handler: recommend_users.handler
      MemorySize: 128
      Runtime: ruby2.7
      CodeUri: ../src/recommend_users
      Role:
        Fn::GetAtt:
          - LambdaIAMRole
          - Arn
      Timeout: 10

  RecommendUsersPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
         Fn::GetAtt:
          - RecommendUsersFunction
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - arn:aws:execute-api
            - ":"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: SlackApiGatewayRestApi
            - /*/*/*

  MessengerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Env}_Komatch_messenger"
      Handler: messenger.handler
      MemorySize: 128
      Runtime: ruby2.7
      CodeUri: ../src/messenger
      Role:
        Fn::GetAtt:
          - LambdaIAMRole
          - Arn
      Timeout: 10

  MessengerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
         Fn::GetAtt:
          - MessengerFunction
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - arn:aws:execute-api
            - ":"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: SlackApiGatewayRestApi
            - /*/*/*

  # IAM Role
  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchAccessFromLambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: DynamoDBAccessFromLambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Describe*
                  - dynamodb:List*
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: "*"
        - PolicyName: SystemManagerAccessFromLambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:Describe*
                  - ssm:Get*
                  - ssm:List*
                Resource: "*"
        - PolicyName: ComprehendAccessFromLambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - comprehend:Detect*
                Resource: "*"
      RoleName: !Sub "${Env}_KomatchLambdaRole"
